import os
from aiogram import types, Dispatcher, types
from keyboards import start_keyboard, colab_keyboard, manager_keyboard, bloger_keyboard, number_keyboard
from keyboards import topic_keyboard, topic_keyboard_2, back_keyboard, reels_keyboard
from aiogram.dispatcher import FSMContext
from states import Work, Barter, Manager, Colab, Instagram, YT, VK, TG, DZ, Another
from funcs import get_config, Bloger, is_link, is_number
import time
from asyncio import sleep

#—Ä–∞–±–æ—Ç–∞ —Å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–∞–º–∏
import gspread
from oauth2client.service_account import ServiceAccountCredentials


scope = ["https://spreadsheets.google.com/feeds",
         'https://www.googleapis.com/auth/spreadsheets',
         "https://www.googleapis.com/auth/drive.file",
         "https://www.googleapis.com/auth/drive"]
credentials_file = 'credentials.json'
spreadsheet_era_id = '1zCcn7vOub--6X7gQZ85UCkwCbTjxWjk7xl9b5Ffsqpk'
spreadsheet_bloger_id = '14eYmCcO-T5kCI0qOuD15ICfceIbBsZ9tn9JJ2pz9u7c'
creds = ServiceAccountCredentials.from_json_keyfile_name(credentials_file, scope)
client = gspread.authorize(creds)
# –û–ë–†–ê–ó–ï–¶ –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
# spreadsheet = client.open_by_key(spreadsheet_id)
# sheet = spreadsheet.get_worksheet(0)  # 0 refers to the first sheet


async def number_wrong(message, number=True, text2='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–≤—Ç–æ—Ä–Ω–æ —É–∫–∞–∂–∏—Ç–µ —Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "https://somesite.ru"'):
    text = '–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞, —Å–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É +7***-***-**-**. \n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ'
    if number == False:
        text=text2
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)


async def start(message: types.Message):
    text = '''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç –ï–¥–∏–Ω–æ–≥–æ –†–µ–∫–ª–∞–º–Ω–æ–≥–æ –ê–≥–µ–Ω—Ç—Å—Ç–≤–∞ –ï–†–ê ‚úåüèª

–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –í—ã –º–æ–∂–µ—Ç–µ: 
‚úèÔ∏è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –±–∞–∑—É –±–ª–æ–≥–µ—Ä–æ–≤ –ï–†–ê –∏ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚úèÔ∏è –ø–æ–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É , –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å –≤ –∫–æ–º–ø–∞–Ω–∏–∏

–í —Ä–∞–∑–¥–µ–ª–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ:
‚úèÔ∏è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ —Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–≥–µ—Ä–æ–≤
‚úèÔ∏è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ —Å –ï–†–ê
‚úèÔ∏è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö PR-—Å–æ–±—ã—Ç–∏—è—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö  –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤

'''
    markup = await start_keyboard()
    if isinstance(message, types.Message):
        await message.answer(text=text, reply_markup=markup)
    elif isinstance(message, types.CallbackQuery):
        await message.message.edit_text(text=text, reply_markup=markup)



async def start_again(message: types.Message):
    text = '''–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –≤ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö. '''
    markup = await start_keyboard()
    await message.answer(text=text, reply_markup=markup)


async def back_start(message: types.Message, state: FSMContext):
    ''' —Å—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'''
    await state.finish()
    await start(message)


async def help(message: types.Message):
    await message.answer('help')


async def me(message: types.Message):
    print(message)
    

async def start_poll_work(message: types.Message, state: FSMContext):
    ''' –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –ø–æ –∞–Ω–∫–µ—Ç–µ –Ω–∞ —Ä–∞–±–æ—Ç—É, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ '''
    await state.set_state(Work.Number.state)
    await state.update_data(username=message.from_user.username)
    await state.update_data(user_id=message.from_user.id)
    text = '''–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:
    \n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'''
    markup = await back_keyboard('–ù–∞–∑–∞–¥')
    await message.message.edit_text(text, reply_markup=markup)


async def work_number(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è'''
    if is_number(message.text) == True:
        await state.update_data(number=message.text)
        text = '–í–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –§–ò–û'
        await state.set_state(Work.Name.state)
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        await message.answer(text, reply_markup=markup)
    else:
        text = '–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞, —Å–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É +7***-***-**-**. \n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        await message.answer(text, reply_markup=markup)



async def work_name(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏–º—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç'''
    await state.update_data(name=message.text)
    text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Work.Age.state)


async def work_age(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å'''
    await state.update_data(age=message.text)
    text = '–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Work.Post.state)


async def work_post(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç Hard & Soft Skills '''
    await state.update_data(post=message.text)
    text = '–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ Hard –∏ Soft skills –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Work.Why.state)


async def work_why(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç hard & soft, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –ï–†–ê'''
    await state.update_data(why=message.text)
    text = '–ü–æ—á–µ–º—É –í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ –ï–†–ê –¥–ª—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞?'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Work.Know_from.state)


async def work_know_from(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ—á–µ–º—É –ï–†–ê, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–µ–∑—é–º–µ'''
    await state.update_data(know_from=message.text)
    text='–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –í–∞—à–µ —Ä–µ–∑—é–º–µ'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Work.Link_resume.state)


async def work_resume(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ä–µ–∑—é–º–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–µ–π—Å—ã'''
    if is_link(message.text) == True:
        await state.update_data(resume=message.text)
        text = '–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–µ–π—Å—ã.\n*–í–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç"'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        await message.answer(text, reply_markup=markup)
        await state.set_state(Work.Link_case.state)
    else:
        text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–≤—Ç–æ—Ä–Ω–æ —É–∫–∞–∂–∏—Ç–µ —Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "https://somesite.ru"'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        await message.answer(text, reply_markup=markup)


async def work_case(message: types.Message, state: FSMContext):
    ''' –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–µ–π—Å—ã, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å '''
    await state.update_data(case=message.text)
    text = '–¢–µ–∫—É—â–∞—è —Å—Ç–µ–ø–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ (—É—á–µ–±–∞, –¥—Ä—É–≥–∞—è —Ä–∞–±–æ—Ç–∞, —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ú–°–ö)'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Work.Load.state)


async def work_load(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç load, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'''
    await state.update_data(load=message.text)
    text = '‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã '
    await message.answer(text=text)
    spreadsheet = client.open_by_key(spreadsheet_era_id)
    sheet = spreadsheet.get_worksheet(0)  
    data = await state.get_data()
    sheet.append_row(list(data.values()))
    await state.finish()
    await start_again(message)


async def collaboration(message: types.Message):
    text = '''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"

    ‚úèÔ∏è–ü—Ä–æ–π–¥—è –∫—Ä–∞—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ "–ë–∞—Ä—Ç–µ—Ä", –í—ã —Å–º–æ–∂–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ—Å–µ—â–∞—Ç—å —Ä–∞–∑–Ω–æ–≥–æ —Ä–æ–¥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.

    ‚úèÔ∏è–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–≥–µ—Ä–æ–≤, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –ø–æ–ª—É—á–∏–≤ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    
    ‚úèÔ∏è –ü–æ –∏–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Ç—Å–≤–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –ï–†–ê".'''
    markup = await colab_keyboard()
    await message.bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)


#–ù–ê–ß–ê–õ–û –û–ü–†–û–°–ê –ë–ê–†–¢–ï–†
async def start_poll_barter(message: types.Message, state: FSMContext):
    ''' –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –ø–æ –±–∞—Ä—Ç–µ—Ä—É, Name '''
    await state.set_state(Barter.Name.state)
    await state.update_data(username=message.from_user.username)
    await state.update_data(user_id=message.from_user.id)
    text = '''–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–∞ –ë–∞—Ä—Ç–µ—Ä —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:
    \n–í–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)


async def barter_name(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏–º—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'''
    await state.update_data(name=message.text)
    text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Barter.Number.state)


async def barter_number(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ—Ü—Å–µ—Ç—å'''
    if is_number(message.text) == True:
        await state.update_data(number=message.text)
        text = '–ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é —Å–æ—Ü—Å–µ—Ç—å'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        await message.answer(text, reply_markup=markup)
        await state.set_state(Barter.Link.state)
    else:
        text = '–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞, —Å–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É +7***-***-**-**. \n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        await message.answer(text, reply_markup=markup)


async def barter_link(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Å–æ—Ü—Å–µ—Ç—å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'''
    if is_link(message.text) == True:
        await state.update_data(link=message.text)
        text = '–í–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        await message.answer(text, reply_markup=markup)
        await state.set_state(Barter.Subs.state)
    else:
        text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–≤—Ç–æ—Ä–Ω–æ —É–∫–∞–∂–∏—Ç–µ —Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "https://somesite.ru"'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        await message.answer(text, reply_markup=markup)


async def barter_subs(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞'''
    await state.update_data(subs=message.text)
    text = '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Barter.City.state)


async def barter_city(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'''
    await state.update_data(city=message.text)
    text = '–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Barter.Offer.state)


async def barter_offer(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç offer, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'''
    await state.update_data(offer=message.text)
    text = '‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã '
    await message.answer(text=text)
    spreadsheet = client.open_by_key(spreadsheet_era_id)
    sheet = spreadsheet.get_worksheet(1)  
    data = await state.get_data()
    sheet.append_row(list(data.values()))
    await state.finish()
    await start_again(message)


#–ù–ê–ß–ê–õ–û –û–ü–†–û–°–ê –ú–ï–ù–ï–î–ñ–ï–†
async def start_poll_manager(message: types.Message, state: FSMContext):
    ''' –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –ø–æ –±–∞—Ä—Ç–µ—Ä—É, Number '''
    await state.set_state(Manager.Number.state)
    await state.update_data(username=message.from_user.username)
    await state.update_data(user_id=message.from_user.id)
    text = '''–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–ª–æ–≥–µ—Ä–æ–≤ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:
    \n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)


async def manager_number(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç Name'''
    if is_number(message.text) == True:
        await state.update_data(number=message.text)
        text = '–í–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        await message.answer(text, reply_markup=markup)
        await state.set_state(Manager.Name.state)
    else:
        await number_wrong(message)

async def manager_name(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏–º—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–µ—Ä–æ–≤'''
    await state.update_data(name=message.text)
    text = '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –±–ª–æ–≥–µ—Ä–æ–≤'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Manager.Link.state)


async def manager_link(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–µ—Ä–æ–≤ –∏ —Å–ø—Ä–∞–≤—à–∏–≤–∞–µ—Ç exclusive'''
    if is_link(message.text) == True:
        await state.update_data(link=message.text)
        text = '–ï—Å—Ç—å –ª–∏ –±–ª–æ–≥–µ—Ä—ã —É –í–∞—Å –Ω–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ –∏/–∏–ª–∏ —Ç–µ —É –∫–æ–≥–æ –≤—ã –≤—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ PR.'
        markup = await reels_keyboard('M')
        await message.answer(text=text, reply_markup=markup)
        await state.set_state(Manager.Exclusive.state)
    else:
        await number_wrong(message, number=False)


async def manager_exclusive(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç exclusive, - if else'''
    data = message.data
    data = data.split('_')
    if data[1] == "yes":
        text = "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–∏—Ö –±–ª–æ–≥–µ—Ä–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"    
        await state.set_state(Manager.Exclusive_links.state)
    if data[1] == "no":
        await state.update_data(exclusive="–ù–µ—Ç")
        text = '–ü–æ–º–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏—Ö –±–ª–æ–≥–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –ª–∏ –≤—ã —Ç–∞–∫–∂–µ –≤ –ø–æ–¥–±–æ—Ä–µ –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å?'
        await state.set_state(Manager.Q.state)
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.message.answer(text, reply_markup=markup)


async def manager_exclusive_links(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç exclusive_links –∑–∞–¥–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å'''
    data = '  ___  '.join(message.text.split())
    await message.answer(data)

    await state.update_data(exclusive=data)
    text = '–ü–æ–º–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏—Ö –±–ª–æ–≥–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –ª–∏ –≤—ã —Ç–∞–∫–∂–µ –≤ –ø–æ–¥–±–æ—Ä–µ –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å?'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Manager.Q.state)


async def manager_q(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'''
    await state.update_data(q=message.text)
    text = '‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã '
    await message.answer(text=text, reply_markup=types.ReplyKeyboardRemove())
    spreadsheet = client.open_by_key(spreadsheet_era_id)
    sheet = spreadsheet.get_worksheet(2)  
    data = await state.get_data()
    sheet.append_row(list(data.values()))
    await state.finish()
    await start_again(message)


#–ù–ê–ß–ê–õ–û –û–ü–†–û–°–ê –°–û–¢–†–£–î–ù–ò–ß–ï–°–¢–í–û 
async def start_poll_col(message: types.Message, state: FSMContext):
    ''' –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É, Name '''
    await state.set_state(Colab.Name.state)
    await state.update_data(username=message.from_user.username)
    await state.update_data(user_id=message.from_user.id)
    text = '''–î–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:
    \n–í–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.bot.send_message(message.from_user.id, text, reply_markup=markup)


async def colab_name(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç name –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç post'''
    await state.update_data(name=message.text)
    text = '–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Colab.Post.state)


async def colab_post(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç post –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç company'''
    await state.update_data(post=message.text)
    text = '–ù–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Colab.Company.state)


async def colab_company(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç company –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç reason'''
    await state.update_data(company=message.text)
    text = '–ü—Ä–∏—á–∏–Ω–∞ –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è (–∫–∞–∫ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å). –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Colab.Reason.state)


async def colab_reason(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç reason –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç number'''
    await state.update_data(reason=message.text)
    text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Colab.Number.state)


async def colab_number(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–æ–º–µ—Ä, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'''
    if is_number(message.text) == True:
        await state.update_data(number=message.text)
        text = '‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã '
        await message.answer(text=text)
        spreadsheet = client.open_by_key(spreadsheet_era_id)
        sheet = spreadsheet.get_worksheet(3)  
        data = await state.get_data()
        sheet.append_row(list(data.values()))
        await state.finish()
        await start_again(message)
    else:
        await number_wrong(message)


#–ù–ê–ß–ê–õ–û –û–ü–†–û–°–ê –ë–õ–û–ì–ï–†
async def start_poll_bloger(message: types.Message, state: FSMContext):
    ''' –í—ã–±–µ—Ä–∞–µ–º —Å–æ—Ü—Å–µ—Ç—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ '''
    text = '''–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å —Å–æ —Å–≤–æ–∏–º –±–ª–æ–≥–æ–º
    (–ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–¥–Ω–æ–º, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏)'''
    markup = await bloger_keyboard()
    await message.bot.send_message(message.from_user.id, text, reply_markup=markup)


#–ù–ê–ß–ê–õ–û –û–ü–†–û–°–ê INSTAGRM
async def start_poll_inst(message: types.Message, state: FSMContext, flag = None):
    ''' –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –±–ª–æ–≥–µ—Ä–∞ –∏–Ω—Å—Ç–∞, Number '''
    await state.set_state(Instagram.Number.state)
    await state.update_data(username=message.from_user.username)
    await state.update_data(user_id=message.from_user.id)
    if Bloger(str(message.from_user.id)).check():
        num = Bloger(str(message.from_user.id)).get()
        text = f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä {num}?'
        markup = await number_keyboard()
        await state.set_state(Instagram.Wait.state)
    else:
        #–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä    
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    if flag:
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
        markup =  types.ReplyKeyboardRemove()
    await message.bot.send_message(message.from_user.id, text, reply_markup=markup)


async def inst_number(call: types.CallbackQuery, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç number –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç Link'''
    if (call.data if type(call) is types.CallbackQuery else call.text) == 'number_y':
        await state.update_data(number=Bloger(f"{call.from_user.id}").get())
        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –í–∞—à Instagram'
    elif (call.data if type(call) is types.CallbackQuery else call.text) == 'number_n':
        await start_poll_inst(call, state, flag = True)
    else:
        if is_number(call.text) == True:
            await state.update_data(number=call.text)
            Bloger(f"{call.from_user.id}").record(call.text)
        else:
            await number_wrong(call)
            return
    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –í–∞—à Instagram'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await call.answer(text, reply_markup=markup)
    await state.set_state(Instagram.Link.state)


async def inst_number_wait(message: types.Message, state: FSMContext):
    if message.text == "–î–∞‚úÖ":
        await state.update_data(number=Bloger(f"{message.from_user.id}").get())
        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –í–∞—à Instagram'
    else: 
        await start_poll_inst(message, state, flag = True)
        await state.set_state(Instagram.Number.state)
        return
    await message.answer(text=text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Instagram.Link.state)


async def inst_link(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Å—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–º–∞—Ç–∏–∫—É'''
    if is_link(message.text) == True:
        await state.update_data(link=message.text)
        await state.update_data(topic=[])
        lst = get_config(flag=True)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –í–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:'
        markup = await topic_keyboard(lst)
        await message.answer(text=text, reply_markup=markup)
        await state.set_state(Instagram.Topic.state)
    else:
        await number_wrong(message, number=False, text2='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–≤—Ç–æ—Ä–Ω–æ —É–∫–∞–∂–∏—Ç–µ —Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "https://somesite.ru"')


async def inst_topic_choose(message: types.Message, state: FSMContext):
    ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ '''
    if message.data.split('_')[1] == '–î—Ä—É–≥–æ–µ (—É–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–∏)':
        text = '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º'
        await state.set_state(Instagram.Topic_another.state)
        await message.message.edit_text(text=text)
        return
    lst = await state.get_data()
    lst = lst['topic']
    lst.append(message.data.split('_')[1])
    await state.update_data(topic=lst)
    text = f'''–¢–µ–º–∞—Ç–∏–∫–∞: {message.data.split('_')[1]} –¥–æ–±–∞–≤–ª–µ–Ω–∞!
–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º–∞—Ç–∏–∫—É?'''
    markup = await topic_keyboard_2()
    await message.message.edit_text(text=text, reply_markup=markup)


async def inst_topic_another(message: types.Message, state: FSMContext):
    ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ - –¥—Ä—É–≥–æ–µ'''
    lst = await state.get_data()
    lst = lst['topic']
    lst.append(message.text)
    await state.update_data(topic=lst)
    text = f'''–¢–µ–º–∞—Ç–∏–∫–∞: {message.text} –¥–æ–±–∞–≤–ª–µ–Ω–∞!
    –∂–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º–∞—Ç–∏–∫—É?'''
    markup = await topic_keyboard_2()
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(Instagram.Topic.state)


async def inst_topic_choose_2(message: types.Message, state: FSMContext):
    ''' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ –∏–ª –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä '''
    if message.data == 'topic_start':
        lst = get_config(flag=True)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –í–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:'
        markup = await topic_keyboard(lst)
        await message.message.edit_text(text=text, reply_markup=markup)
        return
    elif message.data == 'topic_end':
        lst = await state.get_data()
        lst = lst['topic']
        lst = ', '.join(lst)
        await state.update_data(topic=lst)
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    text = f'''–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'''
    await message.message.edit_text(text=text, reply_markup=markup)
    await state.set_state(Instagram.Subs.state)


async def inst_subs(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø—Å–∏–∞–Ω–∏–µ –±–ª–æ–≥–∞'''
    await state.update_data(subs=message.text)
    text = '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–≥–∞ \n*–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç–µ –≤ –±–ª–æ–≥–µ'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Instagram.Description.state)


async def inst_descroption(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥'''
    await state.update_data(description=message.text)
    text = '–í–∞—à –≥–æ—Ä–æ–¥?'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Instagram.City.state)


async def inst_city(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—É —Å—Ç–æ—Ä–∏—Å'''
    await state.update_data(city=message.text)
    text = '''–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Ä–∏–∏ —Å—Ç–æ—Ä–∏—Å (3-4—à—Ç) 
*–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Instagram.Stories.state)


async def inst_stories(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ü–µ–Ω—É —Å—Ç–æ—Ä–∏—Å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ö–≤–∞—Ç —Å—Ç–æ—Ä–∏—Å'''
    await state.update_data(stories=message.text)
    text = '''–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–µ –æ—Ö–≤–∞—Ç—ã —Å—Ç–æ—Ä–∏—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Instagram.Stories_scope.state)


async def inst_stories_scope(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ—Ö–≤–∞—Ç —Å—Ç–æ—Ä–∏—Å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—É —Ä–∏–ª—Å'''
    await state.update_data(stories_scope=message.text)
    text = '''–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∏–ª—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text, reply_markup=markup)
    await state.set_state(Instagram.Reels.state)


async def inst_reels(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ü–µ–Ω—É —Ä–∏–ª—Å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ö–≤–∞—Ç —Ä–∏–ª—Å'''
    await state.update_data(reels=message.text)
    text = '''–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–µ –æ—Ö–≤–∞—Ç—ã –†–∏–ª—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(Instagram.Reels_scope.state)


async def inst_reels_scope(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ—Ö–≤–∞—Ç —Ä–∏–ª—Å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∫—É'''
    await state.update_data(reels_scope=message.text)
    text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 
*–°—Å—ã–ª–∫–∞ –Ω–∞ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –¥–∏—Å–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ—Ö–≤–∞—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç–æ—Ä–∏—Å, –ø–æ—Å—Ç–æ–≤/—Ä–∏–ª—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ –≥–µ–Ω–¥–µ—Ä—É, –≤–æ–∑—Ä–∞—Å—Ç—É, –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏. '''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(Instagram.Statistic.state)


async def inst_statistic(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'''
    if is_link(message.text) == True:
        await state.update_data(statistic=message.text)
        text = '‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã '
        await message.answer(text=text)
        spreadsheet = client.open_by_key(spreadsheet_bloger_id)
        sheet = spreadsheet.get_worksheet(0)  
        num=len(sheet.col_values(1)) + 1
        data = await state.get_data()
        data = list(data.values())
        cell_list = sheet.range(f'A{num}:AQ{num}')  
        cell_index = [0,1,2,3,4,5,10,11,18,19,27,28,33]
        for i, val in enumerate(cell_index):
            cell_list[val].value = data[i]
        cell_list.pop(9)
        sheet.update_cells(cell_list)
        await state.finish()
        await start_again(message)
    else:
        await number_wrong(message, number=False)


#–ù–ê–ß–ê–õ–û –û–ü–†–û–°–ê YOUTUBE
async def start_poll_yt(message: types.Message, state: FSMContext, flag = None):
    ''' –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –±–ª–æ–≥–µ—Ä–∞ –∏–Ω—Å—Ç–∞, Number '''
    await state.set_state(YT.Number.state)
    await state.update_data(username=message.from_user.username)
    await state.update_data(user_id=message.from_user.id)
    if Bloger(str(message.from_user.id)).check():
        num = Bloger(str(message.from_user.id)).get()
        text = f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä {num}?'
        markup = await number_keyboard()
        await state.set_state(YT.Wait.state)
    else:
        #–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä    
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    if flag:
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
        markup =  types.ReplyKeyboardRemove()
    await message.bot.send_message(message.from_user.id, text, reply_markup=markup)


async def yt_number(call: types.CallbackQuery, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç number –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç Link'''
    if (call.data if type(call) is types.CallbackQuery else call.text) == 'number_y':
        await state.update_data(number=Bloger(f"{call.from_user.id}").get())
        text = '–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube –∫–∞–Ω–∞–ª \n*–í —Ñ–æ—Ä–º–∞—Ç–µ https://www.youtube.com/channel'
    elif (call.data if type(call) is types.CallbackQuery else call.text) == 'number_n':
        await start_poll_yt(call, state, flag = True)
    else:
        if is_number((call.data if type(call) is types.CallbackQuery else call.text)) == True:
            await state.update_data(number=call.text)
            Bloger(f"{call.from_user.id}").record(call.text)
        else:
            await number_wrong(call)
            return
    text = '–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube –∫–∞–Ω–∞–ª \n*–í —Ñ–æ—Ä–º–∞—Ç–µ https://www.youtube.com/channel'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await call.answer(text=text, reply_markup=markup)
    await state.set_state(YT.Link.state)


async def yt_number_wait(message: types.Message, state: FSMContext):
    if message.text == "–î–∞‚úÖ":
        await state.update_data(number=Bloger(f"{message.from_user.id}").get())
        text = '–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube –∫–∞–Ω–∞–ª \n*–í —Ñ–æ—Ä–º–∞—Ç–µ https://www.youtube.com/channel'
    else: 
        await start_poll_yt(message, state, flag = True)
        await state.set_state(YT.Number.state)
        return
    await message.answer(text=text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(YT.Link.state)


async def yt_link(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ yt –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–º–∞—Ç–∏–∫—É'''
    if is_link(message.text) == True:
        await state.update_data(link=message.text)
        await state.update_data(topic=[])
        lst = get_config(flag=True)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à –±–ª–æ–≥:'
        markup = await topic_keyboard(lst)
        await message.answer(text=text, reply_markup=markup)
        await state.set_state(YT.Topic.state)
    else:
        await number_wrong(message, number=False)


async def yt_topic_choose(message: types.Message, state: FSMContext):
    ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ yt'''
    if message.data.split('_')[1] == '–î—Ä—É–≥–æ–µ (—É–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–∏)':
        text = '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º'
        await state.set_state(YT.Topic_another.state)
        await message.message.edit_text(text=text)
        return
    lst = await state.get_data()
    lst = lst['topic']
    lst.append(message.data.split('_')[1])
    await state.update_data(topic=lst)
    text = f'''–¢–µ–º–∞—Ç–∏–∫–∞: {message.data.split('_')[1]} –¥–æ–±–∞–≤–ª–µ–Ω–∞!
–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º–∞—Ç–∏–∫—É?'''
    markup = await topic_keyboard_2()
    await message.message.edit_text(text=text, reply_markup=markup)


async def yt_topic_another(message: types.Message, state: FSMContext):
    ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ - –¥—Ä—É–≥–æ–µ'''
    lst = await state.get_data()
    lst = lst['topic']
    lst.append(message.text)
    await state.update_data(topic=lst)
    text = f'''–¢–µ–º–∞—Ç–∏–∫–∞: {message.text} –¥–æ–±–∞–≤–ª–µ–Ω–∞!
–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º–∞—Ç–∏–∫—É?'''
    markup = await topic_keyboard_2()
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(YT.Topic.state)


async def yt_topic_choose_2(message: types.Message, state: FSMContext):
    ''' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ –∏–ª –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä '''
    if message.data == 'topic_start':
        lst = get_config(flag=True)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –í–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:'
        markup = await topic_keyboard(lst)
        await message.message.edit_text(text=text, reply_markup=markup)
        return
    elif message.data == 'topic_end':
        lst = await state.get_data()
        lst = lst['topic']
        lst = ', '.join(lst)
        await state.update_data(topic=lst)
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    text = f'''–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'''
    await message.message.edit_text(text=text, reply_markup=markup)
    await state.set_state(YT.Subs.state)


async def yt_subs(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø—Å–∏–∞–Ω–∏–µ –±–ª–æ–≥–∞'''
    await state.update_data(subs=message.text)
    text = '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–≥–∞ \n*–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç–µ –≤ –±–ª–æ–≥–µ'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(YT.Description.state)


async def yt_descroption(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç country'''
    await state.update_data(description=message.text)
    text = '–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É —Å—Ç—Ä–∞–Ω—É'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(YT.Country.state)


async def yt_country(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç country –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—É shorts'''
    await state.update_data(city=message.text)
    text = '''–†–∞–∑–º–µ—â–∞–µ—Ç–µ –ª–∏ –í—ã –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Shorts?'''
    markup = await reels_keyboard('YT')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(YT.Question_shotrs.state)


async def yt_questions_shorts(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç questions_shorts –∏ pass'''
    data = message.data.split("_")
    if data[1] == 'yes':
        text = "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Shorts"
        await state.set_state(YT.Shorts.state)
    if data[1] == 'no':
        await state.update_data(stories="–Ω–µ —Ä–∞–∑–º–µ—â–∞–µ—Ç")
        await state.update_data(stories_scope="–Ω–µ —Ä–∞–∑–º–µ—â–∞–µ—Ç")
        text = '''–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
*–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.''' 
        await state.set_state(YT.Video.state)

    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.message.answer(text=text, reply_markup=markup)


async def yt_shorts(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ü–µ–Ω—É shorts –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ö–≤–∞—Ç shorts'''
    await state.update_data(stories=message.text)
    text = '''–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã Shorts'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(YT.Shorts_views.state)


async def yt_shorts_views(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ—Ö–≤–∞—Ç shorts –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'''
    await state.update_data(stories_scope=message.text)
    text = '''–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
*–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(YT.Video.state)


async def yt_video(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ü–µ–Ω—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ö–≤–∞—Ç –≤–∏–¥–µ–æ'''
    await state.update_data(reels=message.text)
    text = '''–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(YT.Video_views.state)


async def yt_video_views(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ—Ö–≤–∞—Ç video –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∫—É'''
    await state.update_data(reels_scope=message.text)
    text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 
*–°—Å—ã–ª–∫–∞ –Ω–∞ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –¥–∏—Å–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ –≥–µ–Ω–¥–µ—Ä—É, –≤–æ–∑—Ä–∞—Å—Ç—É, –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏. '''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(YT.Statistic.state)


async def yt_statistic(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'''
    if is_link(message.text) == True:
        await state.update_data(statistic=message.text)
        text = '‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã '
        await message.answer(text=text)
        spreadsheet = client.open_by_key(spreadsheet_bloger_id)
        sheet = spreadsheet.get_worksheet(1)  
        num=len(sheet.col_values(1)) + 1
        data = await state.get_data()
        data = list(data.values())
        cell_list = sheet.range(f'A{num}:AQ{num}')  
        cell_index = [0,1,2,3,4,5,10,12,16,17,22,23,31]
        for i, val in enumerate(cell_index):
            cell_list[val].value = data[i]
        cell_list.pop(41)
        cell_list.pop(34)
        cell_list.pop(11)
        cell_list.pop(9)
        sheet.update_cells(cell_list)
        await state.finish()
        await start_again(message)
    else:
        await number_wrong(message, number=False)


#–ù–ê–ß–ê–õ–û –û–ü–†–û–°–ê VK
async def start_poll_vk(message: types.Message, state: FSMContext, flag = None):
    ''' –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –±–ª–æ–≥–µ—Ä–∞ vk, Number '''
    await state.set_state(VK.Number.state)
    await state.update_data(username=message.from_user.username)
    await state.update_data(user_id=message.from_user.id)
    if Bloger(str(message.from_user.id)).check():
        num = Bloger(str(message.from_user.id)).get()
        text = f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä {num}?'
        markup = await number_keyboard()
        await state.set_state(VK.Wait.state)
    else:
        #–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä    
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    if flag:
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
        markup =  types.ReplyKeyboardRemove()
    await message.bot.send_message(message.from_user.id, text, reply_markup=markup)


async def vk_number(call: types.CallbackQuery, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç number –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç Link'''
    if (call.data if type(call) is types.CallbackQuery else call.text) == 'number_y':
        await state.update_data(number=Bloger(f"{call.from_user.id}").get())
        text = '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–∫–æ–Ω—Ç–∞–∫—Ç–µ'
    elif (call.data if type(call) is types.CallbackQuery else call.text) == 'number_n':
        await start_poll_vk(call, state, flag = True)
    else:
        if is_number((call.data if type(call) is types.CallbackQuery else call.text)) == True:
            await state.update_data(number=call.text)
            Bloger(f"{call.from_user.id}").record(call.text)
        else:
            await number_wrong(call)
            return
    text = '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–∫–æ–Ω—Ç–∞–∫—Ç–µ'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await call.answer(text=text, reply_markup=markup)
    await state.set_state(VK.Link.state)


async def vk_number_wait(message: types.Message, state: FSMContext):
    if message.text == "–î–∞‚úÖ":
        await state.update_data(number=Bloger(f"{message.from_user.id}").get())
        text = '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–∫–æ–Ω—Ç–∞–∫—Ç–µ'
    else: 
        await start_poll_vk(message, state, flag = True)
        await state.set_state(VK.Number.state)
        return
    await message.answer(text=text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(VK.Link.state)


async def vk_link(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ vk –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–º–∞—Ç–∏–∫—É'''
    if is_link(message.text) == True:
        await state.update_data(link=message.text)
        await state.update_data(topic=[])
        lst = get_config(flag=True)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à –±–ª–æ–≥:'
        markup = await topic_keyboard(lst)
        await message.answer(text=text, reply_markup=markup)
        await state.set_state(VK.Topic.state)
    else:
        await number_wrong(message, number=False)


async def vk_topic_choose(message: types.Message, state: FSMContext):
    ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ vk'''
    if message.data.split('_')[1] == '–î—Ä—É–≥–æ–µ (—É–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–∏)':
        text = '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º'
        await state.set_state(VK.Topic_another.state)
        await message.message.edit_text(text=text)
        return
    lst = await state.get_data()
    lst = lst['topic']
    lst.append(message.data.split('_')[1])
    await state.update_data(topic=lst)
    text = f'''–¢–µ–º–∞—Ç–∏–∫–∞: {message.data.split('_')[1]} –¥–æ–±–∞–≤–ª–µ–Ω–∞!
–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º–∞—Ç–∏–∫—É?'''
    markup = await topic_keyboard_2()
    await message.message.edit_text(text=text, reply_markup=markup)


async def vk_topic_another(message: types.Message, state: FSMContext):
    ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ - –¥—Ä—É–≥–æ–µ'''
    lst = await state.get_data()
    lst = lst['topic']
    lst.append(message.text)
    await state.update_data(topic=lst)
    text = f'''–¢–µ–º–∞—Ç–∏–∫–∞: {message.text} –¥–æ–±–∞–≤–ª–µ–Ω–∞!
–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º–∞—Ç–∏–∫—É?'''
    markup = await topic_keyboard_2()
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(VK.Topic.state)


async def vk_topic_choose_2(message: types.Message, state: FSMContext):
    ''' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ –∏–ª –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä '''
    if message.data == 'topic_start':
        lst = get_config(flag=True)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –í–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:'
        markup = await topic_keyboard(lst)
        await message.message.edit_text(text=text, reply_markup=markup)
        return
    elif message.data == 'topic_end':
        lst = await state.get_data()
        lst = lst['topic']
        lst = ', '.join(lst)
        await state.update_data(topic=lst)
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    text = f'''–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'''
    await message.message.edit_text(text=text, reply_markup=markup)
    await state.set_state(VK.Subs.state)


async def vk_subs(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø—Å–∏–∞–Ω–∏–µ –±–ª–æ–≥–∞'''
    await state.update_data(subs=message.text)
    text = '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–≥–∞ \n*–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç–µ –≤ –±–ª–æ–≥–µ'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(VK.Description.state)


async def vk_descroption(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç country'''
    await state.update_data(description=message.text)
    text = '–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ–æ—Ä–æ–¥'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(VK.Country.state)


async def vk_country(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç country –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ—Å—Ç–∞'''
    await state.update_data(city=message.text)
    text = '''–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(VK.Post_views.state)


async def vk_post_views(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ—Ö–≤–∞—Ç post –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—É –ø–æ—Å—Ç–∞'''
    await state.update_data(stories_scope=message.text)
    text = '''–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(VK.Post.state)


async def vk_post(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ü–µ–Ω—É post –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∫–ª–∏–ø–æ–≤ '''
    await state.update_data(stories=message.text)
    text = '''–£–∫–∞–∂–∏—Ç–µ, –ø—É–±–ª–∏–∫—É–µ—Ç–µ –ª–∏ –≤—ã –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ VK –∫–ª–∏–ø–æ–≤?'''
    markup = await reels_keyboard('VK')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(VK.Question_shotrs.state)


async def vk_questions_clips(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç questions_clips –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç pass '''
    data = message.data.split("_")
    if data[1] == 'yes':
        text = "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ VK - –∫–ª–∏–ø–æ–≤"
        await state.set_state(VK.Clip_views.state)
    if data[1] == 'no':
        await state.update_data(reels="–Ω–µ —Ä–∞–∑–º–µ—â–∞–µ—Ç")
        await state.update_data(reels_scope="–Ω–µ —Ä–∞–∑–º–µ—â–∞–µ—Ç")
        text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 
*–°—Å—ã–ª–∫–∞ –Ω–∞ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –¥–∏—Å–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ –≥–µ–Ω–¥–µ—Ä—É, –≤–æ–∑—Ä–∞—Å—Ç—É, –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏. '''
        await state.set_state(VK.Statistic.state)

    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.message.answer(text=text, reply_markup=markup)


async def vk_clip_views(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ—Ö–≤–∞—Ç clip –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—É clip'''
    await state.update_data(reels_scope=message.text)
    text = '''–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å VK-–∫–ª–∏–ø–∞'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(VK.Clip.state)


async def vk_clip(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ü–µ–Ω—É clip –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'''
    await state.update_data(reels=message.text)
    text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 
*–°—Å—ã–ª–∫–∞ –Ω–∞ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –¥–∏—Å–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ –≥–µ–Ω–¥–µ—Ä—É, –≤–æ–∑—Ä–∞—Å—Ç—É, –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏. '''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(VK.Statistic.state)


async def vk_statistic(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'''
    if is_link(message.text) == True:
        await state.update_data(statistic=message.text)
        text = '‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã '
        await message.answer(text=text)
        spreadsheet = client.open_by_key(spreadsheet_bloger_id)
        sheet = spreadsheet.get_worksheet(2)  
        num=len(sheet.col_values(1)) + 1
        data = await state.get_data()
        data = list(data.values())
        cell_list = sheet.range(f'A{num}:AQ{num}')
        cell_index = [0,1,2,3,4,5,9,11,14,16,24,25,33]
        for i, val in enumerate(cell_index):
            cell_list[val].value = data[i]
        cell_list.pop(41)
        cell_list.pop(34)
        cell_list.pop(10)
        sheet.update_cells(cell_list)
        await state.finish()
        await start_again(message)
    else:
        await number_wrong(message, number=False)


#–ù–ê–ß–ê–õ–û –û–ü–†–û–°–ê TG
async def start_poll_tg(message: types.Message, state: FSMContext, flag = None):
    ''' –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –±–ª–æ–≥–µ—Ä–∞ tg, Number '''
    await state.set_state(TG.Number.state)
    await state.update_data(username=message.from_user.username)
    await state.update_data(user_id=message.from_user.id)
    if Bloger(str(message.from_user.id)).check():
        num = Bloger(str(message.from_user.id)).get()
        text = f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä {num}?'
        markup = await number_keyboard()
        await state.set_state(TG.Wait.state)
    else:
        #–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä    
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    if flag:
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
        markup =  types.ReplyKeyboardRemove()
    await message.bot.send_message(message.from_user.id, text, reply_markup=markup)


async def tg_number(call: types.CallbackQuery, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç number –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç Link'''
    if (call.data if type(call) is types.CallbackQuery else call.text) == 'number_y':
        await state.update_data(number=Bloger(f"{call.from_user.id}").get())
        text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram –∫–∞–Ω–∞–ª
*–í —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/channel'''
    elif (call.data if type(call) is types.CallbackQuery else call.text) == 'number_n':
        await start_poll_tg(call, state, flag = True)
    else:
        if is_number((call.data if type(call) is types.CallbackQuery else call.text)) == True:
            await state.update_data(number=call.text)
            Bloger(f"{call.from_user.id}").record(call.text)
        else:
            await number_wrong(call)
            return
    text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram –∫–∞–Ω–∞–ª
*–í —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/channel'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await call.answer(text=text, reply_markup=markup)
    await state.set_state(TG.Link.state)


async def tg_number_wait(message: types.Message, state: FSMContext):
    if message.text == "–î–∞‚úÖ":
        await state.update_data(number=Bloger(f"{message.from_user.id}").get())
        text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram –∫–∞–Ω–∞–ª
*–í —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/channel'''
    else: 
        await start_poll_tg(message, state, flag = True)
        await state.set_state(TG.Number.state)
        return
    await message.answer(text=text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(TG.Link.state)


async def tg_link(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ tg –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–º–∞—Ç–∏–∫—É'''
    if is_link(message.text) == True:
        await state.update_data(link=message.text)
        await state.update_data(topic=[])
        lst = get_config(flag=True)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à –±–ª–æ–≥:'
        markup = await topic_keyboard(lst)
        await message.answer(text=text, reply_markup=markup)
        await state.set_state(TG.Topic.state)
    else:
        await number_wrong(message, number=False)


async def tg_topic_choose(message: types.Message, state: FSMContext):
    ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ tg'''
    if message.data.split('_')[1] == '–î—Ä—É–≥–æ–µ (—É–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–∏)':
        text = '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º'
        await state.set_state(TG.Topic_another.state)
        await message.message.edit_text(text=text)
        return
    lst = await state.get_data()
    lst = lst['topic']
    lst.append(message.data.split('_')[1])
    await state.update_data(topic=lst)
    text = f'''–¢–µ–º–∞—Ç–∏–∫–∞: {message.data.split('_')[1]} –¥–æ–±–∞–≤–ª–µ–Ω–∞!
–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º–∞—Ç–∏–∫—É?'''
    markup = await topic_keyboard_2()
    await message.message.edit_text(text=text, reply_markup=markup)


async def tg_topic_another(message: types.Message, state: FSMContext):
    ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ - –¥—Ä—É–≥–æ–µ'''
    lst = await state.get_data()
    lst = lst['topic']
    lst.append(message.text)
    await state.update_data(topic=lst)
    text = f'''–¢–µ–º–∞—Ç–∏–∫–∞: {message.text} –¥–æ–±–∞–≤–ª–µ–Ω–∞!
–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º–∞—Ç–∏–∫—É?'''
    markup = await topic_keyboard_2()
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(TG.Topic.state)


async def tg_topic_choose_2(message: types.Message, state: FSMContext):
    ''' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ –∏–ª –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä '''
    if message.data == 'topic_start':
        lst = get_config(flag=True)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –í–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:'
        markup = await topic_keyboard(lst)
        await message.message.edit_text(text=text, reply_markup=markup)
        return
    elif message.data == 'topic_end':
        lst = await state.get_data()
        lst = lst['topic']
        lst = ', '.join(lst)
        await state.update_data(topic=lst)
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    text = f'''–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'''
    await message.message.edit_text(text=text, reply_markup=markup)
    await state.set_state(TG.Subs.state)


async def tg_subs(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ post view'''
    await state.update_data(subs=message.text)
    text = '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(TG.Post_views.state)


async def tg_post_view(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç post view –∏ Post'''
    await state.update_data(description=message.text)
    text = '–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞ 1/24'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(TG.Post.state)


async def tg_post(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç post –∏ country'''
    await state.update_data(city=message.text)
    text = '''–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥'''
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(TG.Country.state)


async def tg_country(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç country –∏ desc'''
    await state.update_data(stories_scope=message.text)
    text = '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–≥–∞ \n*–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç–µ –≤ –±–ª–æ–≥–µ'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(TG.Description.state)


async def tg_description(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç desc –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É '''
    await state.update_data(stories=message.text)
    text ='''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 
*–°—Å—ã–ª–∫–∞ –Ω–∞ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –¥–∏—Å–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ –≥–µ–Ω–¥–µ—Ä—É, –≤–æ–∑—Ä–∞—Å—Ç—É, –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏. '''    
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(TG.Statistic.state)


async def tg_statistic(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'''
    if is_link(message.text) == True:
        await state.update_data(statistic=message.text)
        text = '‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã '
        await message.answer(text=text)
        spreadsheet = client.open_by_key(spreadsheet_bloger_id)
        sheet = spreadsheet.get_worksheet(3)  
        num=len(sheet.col_values(1)) + 1
        data = await state.get_data()
        data = list(data.values())
        cell_list = sheet.range(f'A{num}:AQ{num}')
        cell_index = [0,1,2,3,4,5,10,12,20,23,25]
        for i, val in enumerate(cell_index):
            cell_list[val].value = data[i]
        cell_list.pop(33)
        cell_list.pop(22)
        cell_list.pop(8)
        sheet.update_cells(cell_list)
        await state.finish()
        await start_again(message)
    else:
        await number_wrong(message, number=False)


#–ù–ê–ß–ê–õ–û –û–ü–†–û–°–ê DZ
async def start_poll_dz(message: types.Message, state: FSMContext, flag = None):
    ''' –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –±–ª–æ–≥–µ—Ä–∞ dz, Number '''
    await state.set_state(DZ.Number.state)
    await state.update_data(username=message.from_user.username)
    await state.update_data(user_id=message.from_user.id)
    if Bloger(str(message.from_user.id)).check():
        num = Bloger(str(message.from_user.id)).get()
        text = f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä {num}?'
        markup = await number_keyboard()
        await state.set_state(DZ.Wait.state)
    else:
        #–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä    
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    if flag:
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
        markup =  types.ReplyKeyboardRemove()
    await message.bot.send_message(message.from_user.id, text, reply_markup=markup)


async def dz_number(call: types.CallbackQuery, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç number –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç Link'''
    if (call.data if type(call) is types.CallbackQuery else call.text) == 'number_y':
        await state.update_data(number=Bloger(f"{call.from_user.id}").get())
        text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –î–∑–µ–Ω'''
    elif (call.data if type(call) is types.CallbackQuery else call.text) == 'number_n':
        await start_poll_dz(call, state, flag = True)
    else:
        if is_number((call.data if type(call) is types.CallbackQuery else call.text)) == True:
            await state.update_data(number=call.text)
            Bloger(f"{call.from_user.id}").record(call.text)
        else:
            await number_wrong(call)
            return
    text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –î–∑–µ–Ω'''
    await call.answer(text=text)
    await state.set_state(DZ.Link.state)


async def dz_number_wait(message: types.Message, state: FSMContext):
    if message.text == "–î–∞‚úÖ":
        await state.update_data(number=Bloger(f"{message.from_user.id}").get())
        text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –î–∑–µ–Ω'''
    else: 
        await start_poll_dz(message, state, flag = True)
        await state.set_state(DZ.Number.state)
        return
    await message.answer(text=text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(DZ.Link.state)


async def dz_link(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ dz –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–º–∞—Ç–∏–∫—É'''
    if is_link(message.text) == True:
        await state.update_data(link=message.text)
        await state.update_data(topic=[])
        lst = get_config(flag=True)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à –±–ª–æ–≥:'
        markup = await topic_keyboard(lst)
        await message.answer(text=text, reply_markup=markup)
        await state.set_state(DZ.Topic.state)
    else:
        await number_wrong(message, number=False)


async def dz_topic_choose(message: types.Message, state: FSMContext):
    ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ dz'''
    if message.data.split('_')[1] == '–î—Ä—É–≥–æ–µ (—É–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–∏)':
        text = '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º'
        await state.set_state(DZ.Topic_another.state)
        await message.message.edit_text(text=text)
        return
    lst = await state.get_data()
    lst = lst['topic']
    lst.append(message.data.split('_')[1])
    await state.update_data(topic=lst)
    text = f'''–¢–µ–º–∞—Ç–∏–∫–∞: {message.data.split('_')[1]} –¥–æ–±–∞–≤–ª–µ–Ω–∞!
–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º–∞—Ç–∏–∫—É?'''
    markup = await topic_keyboard_2()
    await message.message.edit_text(text=text, reply_markup=markup)


async def dz_topic_another(message: types.Message, state: FSMContext):
    ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ - –¥—Ä—É–≥–æ–µ'''
    lst = await state.get_data()
    lst = lst['topic']
    lst.append(message.text)
    await state.update_data(topic=lst)
    text = f'''–¢–µ–º–∞—Ç–∏–∫–∞: {message.text} –¥–æ–±–∞–≤–ª–µ–Ω–∞!
–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º–∞—Ç–∏–∫—É?'''
    markup = await topic_keyboard_2()
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(DZ.Topic.state)


async def dz_topic_choose_2(message: types.Message, state: FSMContext):
    ''' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ –∏–ª –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä '''
    if message.data == 'topic_start':
        lst = get_config(flag=True)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –í–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:'
        markup = await topic_keyboard(lst)
        await message.message.edit_text(text=text, reply_markup=markup)
        return
    elif message.data == 'topic_end':
        lst = await state.get_data()
        lst = lst['topic']
        lst = ', '.join(lst)
        await state.update_data(topic=lst)
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    text = f'''–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'''
    await message.message.edit_text(text=text, reply_markup=markup)
    await state.set_state(DZ.Subs.state)


async def dz_subs(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ post view'''
    await state.update_data(subs=message.text)
    text = '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(DZ.Post_views.state)


async def dz_post_view(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç post view –∏ Post'''
    await state.update_data(description=message.text)
    text = '–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(DZ.Post.state)


async def dz_post(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç post –∏ desc'''
    await state.update_data(stories_scope=message.text)
    text = '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–≥–∞ \n*–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç–µ –≤ –±–ª–æ–≥–µ'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(DZ.Description.state)


async def dz_description(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç desc –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É '''
    await state.update_data(stories=message.text)
    text ='''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 
*–°—Å—ã–ª–∫–∞ –Ω–∞ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –¥–∏—Å–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ –≥–µ–Ω–¥–µ—Ä—É, –≤–æ–∑—Ä–∞—Å—Ç—É, –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏. '''    
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(DZ.Statistic.state)


async def dz_statistic(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'''
    if is_link(message.text) == True:
        await state.update_data(statistic=message.text)
        text = '‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã '
        await message.answer(text=text)
        spreadsheet = client.open_by_key(spreadsheet_bloger_id)
        sheet = spreadsheet.get_worksheet(4)  
        num=len(sheet.col_values(1)) + 1
        data = await state.get_data()
        data = list(data.values())
        cell_list = sheet.range(f'A{num}:AQ{num}')
        cell_index = [0,1,2,3,4,5,6,8,18,20]
        for i, val in enumerate(cell_index):
            cell_list[val].value = data[i]
        cell_list.pop(28)
        cell_list.pop(21)
        cell_list.pop(17)
        sheet.update_cells(cell_list)
        await state.finish()
        await start_again(message)
    else:
        await number_wrong(message, number=False)


#–ù–ê–ß–ê–õ–û –û–ü–†–û–°–ê –î–†–£–ì–û–ï
async def start_poll_another(message: types.Message, state: FSMContext, flag = None):
    ''' –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –±–ª–æ–≥–µ—Ä–∞ another, Number '''
    await state.set_state(Another.Number.state)
    await state.update_data(username=message.from_user.username)
    await state.update_data(user_id=message.from_user.id)
    if Bloger(str(message.from_user.id)).check():
        num = Bloger(str(message.from_user.id)).get()
        text = f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä {num}?'
        markup = await number_keyboard()
        await state.set_state(Another.Wait.state)
    else:
        #–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä    
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    if flag:
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ WhatsApp –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7***-***-**-**'
        markup =  types.ReplyKeyboardRemove()
    await message.bot.send_message(message.from_user.id, text, reply_markup=markup)


async def another_number(call: types.CallbackQuery, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç number –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç Link'''
    if (call.data if type(call) is types.CallbackQuery else call.text) == 'number_y':
        await state.update_data(number=Bloger(f"{call.from_user.id}").get())
        text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–∞—à–µ–≥–æ –±–ª–æ–≥–∞'''
    elif (call.data if type(call) is types.CallbackQuery else call.text) == 'number_n':
        await start_poll_another(call, state, flag = True)
    else:
        if is_number((call.data if type(call) is types.CallbackQuery else call.text)) == True:
            await state.update_data(number=call.text)
            Bloger(f"{call.from_user.id}").record(call.text)
        else:
            await number_wrong(call)
            return
    text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–∞—à–µ–≥–æ –±–ª–æ–≥–∞'''
    await call.answer(text=text)
    await state.set_state(Another.Link.state)


async def another_number_wait(message: types.Message, state: FSMContext):
    if message.text == "–î–∞‚úÖ":
        await state.update_data(number=Bloger(f"{message.from_user.id}").get())
        text = '''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–∞—à–µ–≥–æ –±–ª–æ–≥–∞'''
    else: 
        await start_poll_another(message, state, flag = True)
        await state.set_state(Another.Number.state)
        return
    await message.answer(text=text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Another.Link.state)


async def another_link(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ another –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–º–∞—Ç–∏–∫—É'''
    if is_link(message.text) == True:
        await state.update_data(link=message.text)
        await state.update_data(topic=[])
        lst = get_config(flag=True)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à –±–ª–æ–≥:'
        markup = await topic_keyboard(lst)
        await message.answer(text=text, reply_markup=markup)
        await state.set_state(Another.Topic.state)
    else:
        await number_wrong(message, number=False)


async def another_topic_choose(message: types.Message, state: FSMContext):
    ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ another'''
    if message.data.split('_')[1] == '–î—Ä—É–≥–æ–µ (—É–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–∏)':
        text = '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º'
        await state.set_state(Another.Topic_another.state)
        await message.message.edit_text(text=text)
        return
    lst = await state.get_data()
    lst = lst['topic']
    lst.append(message.data.split('_')[1])
    await state.update_data(topic=lst)
    text = f'''–¢–µ–º–∞—Ç–∏–∫–∞: {message.data.split('_')[1]} –¥–æ–±–∞–≤–ª–µ–Ω–∞!
–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º–∞—Ç–∏–∫—É?'''
    markup = await topic_keyboard_2()
    await message.message.edit_text(text=text, reply_markup=markup)


async def another_topic_another(message: types.Message, state: FSMContext):
    ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ - –¥—Ä—É–≥–æ–µ'''
    lst = await state.get_data()
    lst = lst['topic']
    lst.append(message.text)
    await state.update_data(topic=lst)
    text = f'''–¢–µ–º–∞—Ç–∏–∫–∞: {message.text} –¥–æ–±–∞–≤–ª–µ–Ω–∞!
–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º–∞—Ç–∏–∫—É?'''
    markup = await topic_keyboard_2()
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(Another.Topic.state)


async def another_topic_choose_2(message: types.Message, state: FSMContext):
    ''' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ –∏–ª –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä '''
    if message.data == 'topic_start':
        lst = get_config(flag=True)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –í–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:'
        markup = await topic_keyboard(lst)
        await message.message.edit_text(text=text, reply_markup=markup)
        return
    elif message.data == 'topic_end':
        lst = await state.get_data()
        lst = lst['topic']
        lst = ', '.join(lst)
        await state.update_data(topic=lst)
        markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    text = f'''–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'''
    await message.message.edit_text(text=text, reply_markup=markup)
    await state.set_state(Another.Subs.state)


async def another_subs(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ post view'''
    await state.update_data(subs=message.text)
    text = '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ—Å—Ç, –≤–∏–¥–µ–æ –∏–ª–∏ –¥—Ä—É–≥–æ–µ)'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(Another.Post_views.state)


async def another_post_view(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç post view –∏ Post'''
    await state.update_data(description=message.text)
    text = '–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(Another.Post.state)


async def another_post(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç post –∏ desc'''
    await state.update_data(stories_scope=message.text)
    text = '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–≥–∞ \n*–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç–µ –≤ –±–ª–æ–≥–µ'
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(Another.Description.state)


async def another_description(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç desc –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É '''
    await state.update_data(stories=message.text)
    text ='''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 
*–°—Å—ã–ª–∫–∞ –Ω–∞ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –¥–∏—Å–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ –≥–µ–Ω–¥–µ—Ä—É, –≤–æ–∑—Ä–∞—Å—Ç—É, –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏. '''    
    markup = await back_keyboard('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(Another.Statistic.state)


async def another_statistic(message: types.Message, state: FSMContext):
    ''' –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'''
    if is_link(message.text) == True:
        await state.update_data(statistic=message.text)
        text = '‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã '
        await message.answer(text=text)
        spreadsheet = client.open_by_key(spreadsheet_bloger_id)
        sheet = spreadsheet.get_worksheet(5)  
        num=len(sheet.col_values(1)) + 1
        data = await state.get_data()
        data = list(data.values())
        cell_list = sheet.range(f'A{num}:AQ{num}')
        cell_index = [0,1,2,3,4,5,6,8,18,20]
        for i, val in enumerate(cell_index):
            cell_list[val].value = data[i]
        cell_list.pop(28)
        cell_list.pop(21)
        cell_list.pop(17)
        sheet.update_cells(cell_list)
        await state.finish()
        await start_again(message)
    else:
        await number_wrong(message, number=False)


#–ö–û–ù–¢–ê–ö–¢–´
async def contacts(call: types.CallbackQuery):
    spreadsheet = client.open_by_key(spreadsheet_era_id)
    sheet = spreadsheet.get_worksheet(4)
    val = sheet.get_all_values()
    text = ''
    for string in val:
        text = text + ((' '.join(string) + '\n') if string != [''] else '\n')
    markup = await back_keyboard('–ù–∞–∑–∞–¥')
    await call.bot.send_message(call.from_user.id, text=text, reply_markup=markup)


#–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í
def registration_handlers(dp: Dispatcher):
    #Commands
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(help, commands=['help'])
    dp.register_message_handler(start, text=['—Å—Ç–∞—Ä—Ç'])
    dp.register_message_handler(me, text=['me'])
    dp.register_message_handler(start_poll_col, text=['col'])
    #Callbacks
    dp.register_callback_query_handler(start_poll_col, text='colab_start')
    dp.register_callback_query_handler(start_poll_work, text='work')
    dp.register_callback_query_handler(start, text='start')
    dp.register_callback_query_handler(collaboration, text='collaboration')
    dp.register_callback_query_handler(start_poll_barter, text='barter')
    dp.register_callback_query_handler(start_poll_manager, text='manager')
    dp.register_callback_query_handler(start_poll_bloger, text='bloger')
    dp.register_callback_query_handler(start_poll_inst, text='Instagram')
    dp.register_callback_query_handler(start_poll_yt, text='YT')
    dp.register_callback_query_handler(start_poll_vk, text='VK')
    dp.register_callback_query_handler(start_poll_tg, text='TG')
    dp.register_callback_query_handler(start_poll_dz, text='–î–∑–µ–Ω')
    dp.register_callback_query_handler(start_poll_another, text='–î—Ä—É–≥–æ–µ')
    dp.register_callback_query_handler(back_start, state='*', text='start')
    #States
        #–•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ï–†–ê
    dp.register_message_handler(work_number, state=Work.Number)
    dp.register_message_handler(work_name, state=Work.Name)
    dp.register_message_handler(work_age, state=Work.Age)
    dp.register_message_handler(work_post, state=Work.Post)
    dp.register_message_handler(work_why, state=Work.Why)
    dp.register_message_handler(work_know_from, state=Work.Know_from)
    dp.register_message_handler(work_resume, state=Work.Link_resume)
    dp.register_message_handler(work_case, state=Work.Link_case)
    dp.register_message_handler(work_load, state=Work.Load)
        #–ë–∞—Ä—Ç–µ—Ä
    dp.register_message_handler(barter_name, state=Barter.Name)
    dp.register_message_handler(barter_number, state=Barter.Number)
    dp.register_message_handler(barter_link, state=Barter.Link)
    dp.register_message_handler(barter_subs, state=Barter.Subs)
    dp.register_message_handler(barter_city, state=Barter.City)
    dp.register_message_handler(barter_city, state=Barter.City)
    dp.register_message_handler(barter_offer, state=Barter.Offer)
        #–ú–µ–Ω–µ–¥–∂–µ—Ä
    dp.register_message_handler(manager_number, state=Manager.Number)
    dp.register_message_handler(manager_name, state=Manager.Name)
    dp.register_message_handler(manager_link, state=Manager.Link)
    dp.register_callback_query_handler(manager_exclusive, state=Manager.Exclusive)
    dp.register_message_handler(manager_exclusive_links, state=Manager.Exclusive_links)
    dp.register_message_handler(manager_q, state=Manager.Q)
        #–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ
    dp.register_message_handler(colab_name, state=Colab.Name)
    dp.register_message_handler(colab_post, state=Colab.Post)
    dp.register_message_handler(colab_company, state=Colab.Company)
    dp.register_message_handler(colab_reason, state=Colab.Reason)
    dp.register_message_handler(colab_number, state=Colab.Number)
        #Instagram
    dp.register_message_handler(inst_number, state=Instagram.Number)
    dp.register_message_handler(inst_number_wait, state=Instagram.Wait)
    dp.register_message_handler(inst_link, state=Instagram.Link)
    dp.register_callback_query_handler(inst_topic_choose, state=Instagram.Topic, text_startswith='Topic')
    dp.register_callback_query_handler(inst_topic_choose_2, state=Instagram.Topic, text_startswith='topic')
    dp.register_message_handler(inst_topic_another, state=Instagram.Topic_another)
    dp.register_message_handler(inst_subs, state=Instagram.Subs)
    dp.register_message_handler(inst_descroption, state=Instagram.Description)
    dp.register_message_handler(inst_city, state=Instagram.City)
    dp.register_message_handler(inst_stories, state=Instagram.Stories)
    dp.register_message_handler(inst_stories_scope, state=Instagram.Stories_scope)
    dp.register_message_handler(inst_reels, state=Instagram.Reels)
    dp.register_message_handler(inst_reels_scope, state=Instagram.Reels_scope)
    dp.register_message_handler(inst_statistic, state=Instagram.Statistic)
        #YouTube
    dp.register_message_handler(yt_number, state=YT.Number)
    dp.register_message_handler(yt_number_wait, state=YT.Wait)
    dp.register_message_handler(yt_link, state=YT.Link)
    dp.register_callback_query_handler(yt_topic_choose, state=YT.Topic, text_startswith='Topic')
    dp.register_callback_query_handler(yt_topic_choose_2, state=YT.Topic, text_startswith='topic')
    dp.register_message_handler(yt_topic_another, state=YT.Topic_another)
    dp.register_message_handler(yt_subs, state=YT.Subs)
    dp.register_message_handler(yt_descroption, state=YT.Description)
    dp.register_message_handler(yt_country, state=YT.Country)
    dp.register_callback_query_handler(yt_questions_shorts, state=YT.Question_shotrs)
    dp.register_message_handler(yt_shorts, state=YT.Shorts)
    dp.register_message_handler(yt_shorts_views, state=YT.Shorts_views)
    dp.register_message_handler(yt_video, state=YT.Video)
    dp.register_message_handler(yt_video_views, state=YT.Video_views)
    dp.register_message_handler(yt_statistic, state=YT.Statistic)
        #VK
    dp.register_message_handler(vk_number, state=VK.Number)
    dp.register_message_handler(vk_number_wait, state=VK.Wait)
    dp.register_message_handler(vk_link, state=VK.Link)
    dp.register_callback_query_handler(vk_topic_choose, state=VK.Topic, text_startswith='Topic')
    dp.register_callback_query_handler(vk_topic_choose_2, state=VK.Topic, text_startswith='topic')
    dp.register_message_handler(vk_topic_another, state=VK.Topic_another)
    dp.register_message_handler(vk_subs, state=VK.Subs)
    dp.register_message_handler(vk_descroption, state=VK.Description)
    dp.register_message_handler(vk_country, state=VK.Country)
    dp.register_callback_query_handler(vk_questions_clips, state=VK.Question_shotrs)
    dp.register_message_handler(vk_post, state=VK.Post)
    dp.register_message_handler(vk_post_views, state=VK.Post_views)
    dp.register_message_handler(vk_clip, state=VK.Clip)
    dp.register_message_handler(vk_clip_views, state=VK.Clip_views)
    dp.register_message_handler(vk_statistic, state=VK.Statistic)
        #TG
    dp.register_message_handler(tg_number, state=TG.Number)
    dp.register_message_handler(tg_number_wait, state=TG.Wait)
    dp.register_message_handler(tg_link, state=TG.Link)
    dp.register_callback_query_handler(tg_topic_choose, state=TG.Topic, text_startswith='Topic')
    dp.register_callback_query_handler(tg_topic_choose_2, state=TG.Topic, text_startswith='topic')
    dp.register_message_handler(tg_topic_another, state=TG.Topic_another)
    dp.register_message_handler(tg_subs, state=TG.Subs)
    dp.register_message_handler(tg_post_view, state=TG.Post_views)
    dp.register_message_handler(tg_post, state=TG.Post)
    dp.register_message_handler(tg_country, state=TG.Country)
    dp.register_message_handler(tg_description, state=TG.Description)
    dp.register_message_handler(tg_statistic, state=TG.Statistic)
        #Dzen
    dp.register_message_handler(dz_number, state=DZ.Number)
    dp.register_message_handler(dz_number_wait, state=DZ.Wait)
    dp.register_message_handler(dz_link, state=DZ.Link)
    dp.register_callback_query_handler(dz_topic_choose, state=DZ.Topic, text_startswith='Topic')
    dp.register_callback_query_handler(dz_topic_choose_2, state=DZ.Topic, text_startswith='topic')
    dp.register_message_handler(dz_topic_another, state=DZ.Topic_another)
    dp.register_message_handler(dz_subs, state=DZ.Subs)
    dp.register_message_handler(dz_post_view, state=DZ.Post_views)
    dp.register_message_handler(dz_post, state=DZ.Post)
    dp.register_message_handler(dz_description, state=DZ.Description)
    dp.register_message_handler(dz_statistic, state=DZ.Statistic)
        #Another
    dp.register_message_handler(another_number, state=Another.Number)
    dp.register_message_handler(another_number_wait, state=Another.Wait)
    dp.register_message_handler(another_link, state=Another.Link)
    dp.register_callback_query_handler(another_topic_choose, state=Another.Topic, text_startswith='Topic')
    dp.register_callback_query_handler(another_topic_choose_2, state=Another.Topic, text_startswith='topic')
    dp.register_message_handler(another_topic_another, state=Another.Topic_another)
    dp.register_message_handler(another_subs, state=Another.Subs)
    dp.register_message_handler(another_post_view, state=Another.Post_views)
    dp.register_message_handler(another_post, state=Another.Post)
    dp.register_message_handler(another_description, state=Another.Description)
    dp.register_message_handler(another_statistic, state=Another.Statistic)
        #–ö–æ–Ω—Ç–∞–∫—Ç—ã
    dp.register_callback_query_handler(contacts, text_startswith='contacts')

