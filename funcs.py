import json
from dataclasses import dataclass
from aiogram.utils.markdown import hlink
from aiogram.dispatcher import FSMContext
from aiogram import types
import validators
import phonenumbers

@dataclass
class Config:
    token: str
    admins: list
    bot_id: int



def get_config(flag=None):
    if flag:
        config = json.load(open("config.txt", "r",encoding='utf-8'))
        return config['TOPICS']
    else:
        config = json.load(open("config.txt", "r", encoding='utf-8'))
        return Config(token=config['TOKEN'], admins=config['ADMIN_ID'], bot_id=config['BOT_ID'])



    
class Bloger:
    def __init__(self, id: str):
        self.id = id
    
    def check(self):
        with open('blogers.json', 'r+') as f:
            blogers = json.load(f)
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è id {self.id} –≤ –±–∞–∑–µ")
            return self.id in blogers.keys()

    def record(self, number: str):
        with open('blogers.json', 'r') as f:
            blogers = json.load(f)
            blogers[self.id] = number
        with open('blogers.json', 'w') as f:
            json.dump(blogers, f, indent=4)
        print(f"–ó–∞–ø–∏—Å—å id {self.id} –≤ –±–∞–∑—É - —É—Å–ø–µ—à–Ω–æ")

    def get(self):
        with open('blogers.json', 'r') as f:
            blogers = json.load(f)
            print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ id {self.id} –∏–∑ –±–∞–∑—ã")
            return blogers[self.id]
        

def is_link(url):
    return validators.url(url)


def is_number(number):
    try:
        res = phonenumbers.parse(number, "RU")
    except:
        return False
    if res.country_code == 7 and len(str(res.national_number)) == 10:
        return True
    else:
        return False



        
# async def events_fomer(events_data: list):
#     '''—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Ç–µ–∫—Å—Ç'''
#     res = ''
#     for event in events_data:
#         text = f'''{event[0]}. {event[1]}
# –¢–µ–º–∞: {event[2]}
# –ú–µ—Å—Ç–æ: {event[3]}
# –í—Ä–µ–º—è: {event[4]}
# –î–∞—Ç–∞: {event[5]}
# –ü—Ä–æ–≥—Ä–∞–º–º–∞: {event[6]}

# '''     
#         res += text
#     res += '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∑–¥–µ—Å—å üëá'
#     return res 